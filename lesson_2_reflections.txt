head - current commit
git init - initialize a Git repository
git stauts - which files have changed since the last commit 

---------------------------------------------------------

Q: What happens when you initialize a repository? Why do you need to do it?

A: We make it possible to track changes by Git. Othervise we don't have the necessary setup to track our changes.

---------------------------------------------------------

staging area --> intermediate area
git add --> adds to the staging area


---------------------------------------------------------

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: Repository contains the previous commits. In the working directory we don't track changes.

---------------------------------------------------------

git commit --> commit changes in the staging area
git diff (without arguments) --> shows changes in the working directory (that hasn't been added to the staging area)
git diff --staged --> changes in the staging area (since the last commit)

---------------------------------------------------------

Q: How can you use the staging area to make sure you have one commit per logical change?

A: Before I commit I can review the changes I made to the file(s).


---------------------------------------------------------

git branch easy-mode --> creates a new branch with easy-mode name


---------------------------------------------------------


Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: When I make an experimantal change to a previous version of my file it may be useful to split my line of work into branches.

---------------------------------------------------------

git log --graph -oneline --> shows the evolution of program versions

git log --graph -oneline master coins--> shows the evolution of program versions (shows both branches)

Creaating new branch:
(a)
git checkout -b new_branch_name
(b)
git branch new_branch_name
git checkout new_branch_name

---------------------------------------------------------

Q: How do the diagrams help you visualize the branch structure?

A: I can see/visualize the evolution/progress of the project.

---------------------------------------------------------

Merging files:
If it appears in both files: we want it.
If it appears only in one files: unknown.

If we know the original file:
Appears in the original, but only in one of the altered files --> remove it
Doesn't apprear in the original, but appears in one of the altered files --> we want it.

merge coins branch into the master branch

git branch --> which branch am I currently using?

git merge aaa bbb --> merge the two versions

git branch -d coins --> deletes a branch (after merged or not needed)
git show --> what changes were introduced by a commit

---------------------------------------------------------

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: New features on different branches can be merged together. It allows a team to work on different features simultaneously.


Q: What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

A: It could be very tedious to try to manually find the differences between versions/branches.

---------------------------------------------------------

---------------------------------------------------------